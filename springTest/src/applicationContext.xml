<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	<!-- 配置bean  通过反射的方式配置
		 class: bean 的全类名，通过反射的方式在IOC容器中创建bean，所以要求 bean中必须有无参数的构造容器
		 id:标识容器中的bean，id值唯一-->
	<bean id="helloWorld" class="com.yang.beans.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>
	
	
	
	
	
	<!-- 通过构造方法来配置bean的属性  ,index或type来区分重载的构造器，index表示参数列表的顺序，type表示参数类型,两者可以混合使用-->
	 <bean id="car" class="com.yang.beans.Car">
		<constructor-arg value="audi" index="0"></constructor-arg>
		<constructor-arg value="shanghai" index="1"></constructor-arg>
		<constructor-arg value="10000" type="double"></constructor-arg>
	</bean>
	
	<bean id="car2" class="com.yang.beans.Car">
		<constructor-arg value="baoma" type="java.lang.String"></constructor-arg>
		<!-- 如果字面值包含特殊字符，可以使用<![CDATA[]]>包裹起来 -->
		<!-- 属性值也可以用value子结点配置 -->
		<constructor-arg type="java.lang.String">
			<value><![CDATA[<shanghai^>]]></value>
		</constructor-arg>
		<constructor-arg  type="int">
			<value>2588</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="person" class="com.yang.beans.Person">
		<property name="name" value="zhansan"></property>
		<property name="age" value="23"></property>
		<!-- 可以使用property的   ref 属性建立bean之间的应用关系,有如下两种方式 -->
		<!-- <property name="car" ref="car2"></property> -->
		<!--
		<property name="car">
			<ref bean="car2"/>
		</property>
		-->
		<!-- 可以为属性赋null值，不过意义不大，因为本身就是null值，赋值方式为<null/>，这也是null的专有标记 -->
		<!-- 或者直接使用内部bean,内部bean不能被外部引用 -->
		<property name="car">
			<bean class="com.yang.beans.Car">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="Changan"></constructor-arg>
				<constructor-arg value="200000" ></constructor-arg>
			</bean>
		</property>
		<!-- 可以为级联属性赋值，注意：属性需要先初始化才可以为级联属性赋值，否则会有异常，及级联对象不能为空 -->
		<property name="car.maxSpeed" value="256"></property>
	</bean>
	
	
	
	
	<!-- 测试如何配置集合属性     
		 其中list子结点对应List，set子结点对应Set集合，array子结点对应数组 -->
	<bean id="person2" class="com.yang.collections.Person">
		<property name="name" value="mike"></property>
		<property name="age" value="34"></property>
		<property name="cars">
			<!-- 使用list结点为list集合属性赋值 -->
			<list>
				<ref bean="car"></ref>
				<ref bean="car2"></ref>
			</list>
		</property>
	</bean>
	
	<!-- 当bean的集合属性是map时，配置方法如下 -->
	<bean id="newPerson" class="com.yang.collections.NewPerson">
		<property name="name" value="rose"></property>
		<property name="age" value="54"></property>
		<property name="cars">
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!--配置properties属性 -->
	<bean id="dataSource" class="com.yang.collections.DataSource">
		<property name="properties">
			<!-- 使用props和prop子结点可以配置Properties属性 -->
			<props>
				<prop key="user">root1</prop>
				<prop key="password">12345</prop>
				<prop key="jdbcUrl">jdbc:mysql</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	
	<!-- 引入util命名空间配置单例的集合bean，以供多个bean进行引用,在其他地方只要配置ref属性指向这个id即可 -->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<bean id="person3" class="com.yang.collections.Person">
		<property name="name" value="Jack"></property>
		<property name="age" value="89"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 通过p命名空间为bean的属性赋值，需要先导入p命名空间   相对于前面的配置方式这种方式更便捷-->
	<bean id="person4" class="com.yang.collections.Person" p:age="30" p:name="Lucy" p:cars-ref="cars"></bean>
</beans>
